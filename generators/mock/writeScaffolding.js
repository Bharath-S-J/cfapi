import path from "node:path";
import fs from "node:fs/promises";
import logger from "../../utils/logger.js";

const writeScaffolding = async (outputDir) => {
  try {
    logger.info("ðŸ›  Writing mock engine scaffolding files...");

    const files = {
      "README.md": `# Mock API

This API was generated using \`cfapi\` in **mock** mode.

## Endpoints

Each model is available under \`/api/<model>\`.

## API Documentation

Visit: \`http://localhost:3000/docs\`

## Start the server

\`\`\`bash
npm install
npm run dev
\`\`\`

---

Generated on ${new Date().toISOString()}
`,

      ".env": `PORT=3000
`,

      ".gitignore": `node_modules
.env
data/
openapi.json
`,

      "package.json": JSON.stringify(
        {
          name: "cfapi-mock-app",
          version: "1.0.0",
          description: "Mock API generated by cfapi CLI",
          main: "server.js",
          type: "module",
          scripts: {
            dev: "nodemon --experimental-json-modules server.js",
            start: "node --experimental-json-modules server.js",
          },
          dependencies: {
            express: "^4.18.2",
            dotenv: "^16.3.1",
            cors: '^2.8.5',
            "swagger-ui-express": "^4.6.3",
            "@faker-js/faker": "^8.0.2",
          },
          devDependencies: {
            nodemon: "^3.0.2",
          },
        },
        null,
        2
      ),
    };

    await Promise.all(
      Object.entries(files).map(async ([fileName, content]) => {
        const fullPath = path.join(outputDir, fileName);
        await fs.writeFile(fullPath, content);
        logger.info(` Created: ${fileName}`);
      })
    );

    logger.info("Mock scaffolding files written.");
  } catch (err) {
    logger.error(`Failed to write mock scaffolding: ${err.message}`);
    throw err;
  }
};

export default writeScaffolding;
